`timescale 1ns/1ns

module tb_snake_v1;
	
	//clock
	reg CLK;

// top
	//Board base clock, Reset button, Direction button
	reg CLK, RESET, LEFT, RIGHT, UP, DOWN;
	wire [3:0] OUTPUT_R_VGA, [3:0] OUTPUT_G_VGA, [3:0] OUTPUT_B_VGA;
	//VGA Sync
  	reg OUTPUT_HS, OUTPUT_VS;
	//7-seg
	reg [1:0] OUTPUT_DIGIT, [7:0] OUTPUT_SEG;

	//Module instantiation
	top top(.CLK(CLK), .RESET(RESET), .LEFT(LEFT), .RIGHT(RIGHT), .UP(UP), .DOWN(DOWN));
// module 2

// module 3

// module 4

// module ...





  input LEFT,
  input RIGHT,
  input UP,
  input DOWN,
  
  //OUTPUT
  
  //VGA RGB color
  output [3:0] vga_r,
  output [3:0] vga_g,
  output [3:0] vga_b,
  //VGA Sync
  output hs,
  output vs,
  //7-seg
  output [1:0] digit,
  output [7:0] seg
  
  );


	//4:2 Priority encoder
	//Fill this out
	four_to_two_priority_encoder_behavioral_module four_to_two_priority_encoder_behavioral
	( .a(A_P_4_TO_2), .b(B_P_4_TO_2), .c(C_P_4_TO_2), .d(D_P_4_TO_2), .out0(OUTPUT0_P_4_TO_2_B), .out1(OUTPUT1_P_4_TO_2_B));
	four_to_two_priority_encoder_dataflow_module four_to_two_priority_encoder_dataflow
	( .a(A_P_4_TO_2), .b(B_P_4_TO_2), .c(C_P_4_TO_2), .d(D_P_4_TO_2), .out0(OUTPUT0_P_4_TO_2_D), .out1(OUTPUT1_P_4_TO_2_D));
  four_to_two_priority_encoder_gatelevel_module four_to_two_priority_encoder_gatelevel
	( .a(A_P_4_TO_2), .b(B_P_4_TO_2), .c(C_P_4_TO_2), .d(D_P_4_TO_2), .out0(OUTPUT0_P_4_TO_2_G), .out1(OUTPUT1_P_4_TO_2_G));

	
	initial
	begin
		 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b0;
		 A_2_TO_4 = 1'b0; B_2_TO_4 = 1'b0;
		 //Fill this out
		 A_P_4_TO_2 = 1'b0; B_P_4_TO_2 = 1'b0; C_P_4_TO_2 = 1'b0; D_P_4_TO_2 = 1'b0;
	end
	
	initial 
	begin	
		 
		 // Test pattern for 4:2 Encoder
		#10 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b1;	 
		#10 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b1; D_4_TO_2 = 1'b0;	
		#10 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b1; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b0;	
		#10 A_4_TO_2 = 1'b1; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b0;	
		
		#90 //delay to border the test of 2:4 Decoder
		#10 A_2_TO_4 = 1'b0; B_2_TO_4 = 1'b0;
		#10 A_2_TO_4 = 1'b0; B_2_TO_4 = 1'b1;
		#10 A_2_TO_4 = 1'b1; B_2_TO_4 = 1'b0;
		#10 A_2_TO_4 = 1'b1; B_2_TO_4 = 1'b1;
		
		#90 //delay to border the test of 4:2 Priority encoder
		//Fill this out
		for (count = 0; count <15; count = count +1)
		  #10 {D_P_4_TO_2, C_P_4_TO_2, B_P_4_TO_2, A_P_4_TO_2} = count;

	end
	
	
endmodule


