`timescale 1ns/1ns
module tb_game_state;



    // module declaration
	      //clock
	      reg CLK;
        // apple_generator
	      reg CLK_GAME_STATE, RESET_GAME_STATE, LEFT_GAME_STATE, RIGHT_GAME_STATE, UP_GAME_STATE, DOWN_GAME_STATE, [4:0] SIZE_GAME_STATE;
	      wire [1:0] OUT_GAME_STATE;



    //Module instantiation

      	game_state game_state (.CLK(CLK_GAME_STATE), .RESET(RESET_GAME_STATE), .LEFT(LEFT_GAME_STATE), .RIGHT(RIGHT_GAME_STATE), .UP(UP_GAME_STATE), .DOWN(DOWN_GAME_STATE), .SIZE(SIZE_GAME_STATE), .GAME_STATE(OUT_GAME_STATE);
      
      
      
      	initial
      	begin
        		forever
        		begin
        			  #10 CLK = !CLK;
        		end
        		CLK_GAME_STATE = 1'b0, RESET_GAME_STATE = 1'b0, LEFT_GAME_STATE = 1'b0, RIGHT_GAME_STATE = 1'b0, UP_GAME_STATE = 1'b0, DOWN_GAME_STATE = 1'b0, SIZE_GAME_STATE = 0;
      	end
      
      
      
      	initial 
      	begin	
      		 
      		 // Test pattern for game_state
      		    #10 LEFT_GAME_STATE = 1'b0, RIGHT_GAME_STATE = 1'b0, UP_GAME_STATE = 1'b0, DOWN_GAME_STATE = 1'b1;
              #10 LEFT_GAME_STATE = 1'b0, RIGHT_GAME_STATE = 1'b0, UP_GAME_STATE = 1'b1, DOWN_GAME_STATE = 1'b0;
              #10 LEFT_GAME_STATE = 1'b0, RIGHT_GAME_STATE = 1'b1, UP_GAME_STATE = 1'b0, DOWN_GAME_STATE = 1'b0;
              #10 LEFT_GAME_STATE = 1'b1, RIGHT_GAME_STATE = 1'b0, UP_GAME_STATE = 1'b0, DOWN_GAME_STATE = 1'b0;
      
      	    	#20 RESET_GAME_STATE = 1'b1;
      	
      	end



endmodule
