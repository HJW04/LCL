`timescale 1ns/1ns

module tb_snake_control;

    // module declaration
	//clock
	reg CLK;

        // snake_control
	reg CLK_SNAKE,RESET_SNAKE, [1:0] M_STATE_SNAKE, [1:0] N_STATE_SNAKE, [9:0] X_ADDR_SNAKE, [8:0] Y_ADDR_SNAKE, [14:0] RND_ADDR_SNAKE;
	wire[11:0] COLOUR_IN_SNAKE, TARGET_ATE_SNAKE;

    //Module instantiation
	 snake_control snake_control (.CLK(CLK_SNAKE), .RESET(RESET_SNAKE), M_STATE(M_STATE_SNAKE), .N_STATE(N_STATE_SNAKE), .X_ADDR(X_ADDR_SNAKE), .Y_ADDR(Y_ADDR_SNAKE), .RND_ADDR(RND_ADDR_SNAKE), .COLOUR_IN(COLOUR_IN_SNAKE), .TARGET_ATE(TARGET_ATE_SNAKE));

	//4:2 Priority encoder
	//Fill this out
	four_to_two_priority_encoder_behavioral_module four_to_two_priority_encoder_behavioral
	( .a(A_P_4_TO_2), .b(B_P_4_TO_2), .c(C_P_4_TO_2), .d(D_P_4_TO_2), .out0(OUTPUT0_P_4_TO_2_B), .out1(OUTPUT1_P_4_TO_2_B));
	four_to_two_priority_encoder_dataflow_module four_to_two_priority_encoder_dataflow
	( .a(A_P_4_TO_2), .b(B_P_4_TO_2), .c(C_P_4_TO_2), .d(D_P_4_TO_2), .out0(OUTPUT0_P_4_TO_2_D), .out1(OUTPUT1_P_4_TO_2_D));
  four_to_two_priority_encoder_gatelevel_module four_to_two_priority_encoder_gatelevel
	( .a(A_P_4_TO_2), .b(B_P_4_TO_2), .c(C_P_4_TO_2), .d(D_P_4_TO_2), .out0(OUTPUT0_P_4_TO_2_G), .out1(OUTPUT1_P_4_TO_2_G));

	
	initial
	begin
		 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b0;
		 A_2_TO_4 = 1'b0; B_2_TO_4 = 1'b0;
		 //Fill this out
		 A_P_4_TO_2 = 1'b0; B_P_4_TO_2 = 1'b0; C_P_4_TO_2 = 1'b0; D_P_4_TO_2 = 1'b0;
	end
	
	initial 
	begin	
		 
		 // Test pattern for 4:2 Encoder
		#10 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b1;	 
		#10 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b1; D_4_TO_2 = 1'b0;	
		#10 A_4_TO_2 = 1'b0; B_4_TO_2 = 1'b1; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b0;	
		#10 A_4_TO_2 = 1'b1; B_4_TO_2 = 1'b0; C_4_TO_2 = 1'b0; D_4_TO_2 = 1'b0;	
		
		#90 //delay to border the test of 2:4 Decoder
		#10 A_2_TO_4 = 1'b0; B_2_TO_4 = 1'b0;
		#10 A_2_TO_4 = 1'b0; B_2_TO_4 = 1'b1;
		#10 A_2_TO_4 = 1'b1; B_2_TO_4 = 1'b0;
		#10 A_2_TO_4 = 1'b1; B_2_TO_4 = 1'b1;
		
		#90 //delay to border the test of 4:2 Priority encoder
		//Fill this out
		for (count = 0; count <15; count = count +1)
		  #10 {D_P_4_TO_2, C_P_4_TO_2, B_P_4_TO_2, A_P_4_TO_2} = count;

	end
	
endmodule
